define(["require", "exports", "../../Styling", "../../Utilities"], function (require, exports, Styling_1, Utilities_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function standardStyles(theme) {
        var _a, _b, _c;
        var s = theme.semanticColors, p = theme.palette;
        var buttonBackground = p.white;
        var buttonBackgroundPressed = s.buttonBackgroundPressed;
        var buttonBackgroundHovered = p.neutralLighter;
        var buttonText = s.buttonText;
        var buttonTextHovered = s.buttonTextHovered;
        var buttonTextChecked = s.buttonTextChecked;
        var buttonTextCheckedHovered = s.buttonTextCheckedHovered;
        return {
            root: {
                backgroundColor: buttonBackground,
                color: buttonText
            },
            rootHovered: {
                backgroundColor: buttonBackgroundHovered,
                color: buttonTextHovered,
                selectors: (_a = {},
                    _a[Styling_1.HighContrastSelector] = {
                        borderColor: 'Highlight',
                        color: 'Highlight'
                    },
                    _a)
            },
            rootPressed: {
                backgroundColor: buttonBackgroundPressed,
                color: buttonTextChecked
            },
            rootExpanded: {
                backgroundColor: buttonBackgroundPressed,
                color: buttonTextChecked
            },
            rootChecked: {
                backgroundColor: buttonBackgroundPressed,
                color: buttonTextChecked
            },
            rootCheckedHovered: {
                backgroundColor: buttonBackgroundPressed,
                color: buttonTextCheckedHovered
            },
            // Split button styles
            splitButtonContainer: {
                selectors: (_b = {},
                    _b[Styling_1.HighContrastSelector] = {
                        border: 'none'
                    },
                    _b)
            },
            splitButtonMenuButton: {
                color: p.white,
                backgroundColor: 'transparent',
                selectors: {
                    ':hover': {
                        backgroundColor: p.neutralLight,
                        selectors: (_c = {},
                            _c[Styling_1.HighContrastSelector] = {
                                color: 'Highlight'
                            },
                            _c)
                    }
                }
            },
            splitButtonMenuButtonDisabled: {
                backgroundColor: p.neutralLighter,
                selectors: {
                    ':hover': {
                        backgroundColor: p.neutralLighter
                    }
                }
            },
            splitButtonDivider: {
                backgroundColor: p.neutralTertiaryAlt
            },
            splitButtonDividerDisabled: {
                backgroundColor: theme.palette.neutralTertiaryAlt
            },
            splitButtonMenuButtonChecked: {
                backgroundColor: p.neutralQuaternaryAlt,
                selectors: {
                    ':hover': {
                        backgroundColor: p.neutralQuaternaryAlt
                    }
                }
            },
            splitButtonMenuButtonExpanded: {
                backgroundColor: p.neutralQuaternaryAlt,
                selectors: {
                    ':hover': {
                        backgroundColor: p.neutralQuaternaryAlt
                    }
                }
            },
            splitButtonMenuIcon: {
                color: p.neutralPrimary
            },
            splitButtonMenuIconDisabled: {
                color: p.neutralTertiary
            }
        };
    }
    exports.standardStyles = standardStyles;
    function primaryStyles(theme) {
        var _a, _b, _c, _d, _e, _f;
        var p = theme.palette;
        return {
            root: {
                backgroundColor: p.themePrimary,
                color: p.white,
                border: 'none',
                selectors: (_a = {},
                    _a[Styling_1.HighContrastSelector] = {
                        color: 'Window',
                        backgroundColor: 'WindowText',
                        MsHighContrastAdjust: 'none'
                    },
                    _a["." + Utilities_1.IsFocusVisibleClassName + " &:focus"] = {
                        selectors: {
                            ':after': {
                                outline: "none",
                                borderColor: p.white
                            }
                        }
                    },
                    _a)
            },
            rootHovered: {
                backgroundColor: p.themeDarkAlt,
                color: p.white,
                selectors: (_b = {},
                    _b[Styling_1.HighContrastSelector] = {
                        color: 'Window',
                        backgroundColor: 'Highlight'
                    },
                    _b)
            },
            rootPressed: {
                backgroundColor: p.themeDark,
                color: p.white,
                selectors: (_c = {},
                    _c[Styling_1.HighContrastSelector] = {
                        color: 'Window',
                        backgroundColor: 'WindowText',
                        MsHighContrastAdjust: 'none'
                    },
                    _c)
            },
            rootExpanded: {
                backgroundColor: p.themeDark,
                color: p.white
            },
            rootChecked: {
                backgroundColor: p.themeDark,
                color: p.white
            },
            rootCheckedHovered: {
                backgroundColor: p.themeDark,
                color: p.white
            },
            rootDisabled: {
                selectors: (_d = {},
                    _d[Styling_1.HighContrastSelector] = {
                        color: 'GrayText',
                        borderColor: 'GrayText',
                        backgroundColor: 'Window'
                    },
                    _d)
            },
            // Split button styles
            splitButtonContainer: {
                selectors: (_e = {},
                    _e[Styling_1.HighContrastSelector] = {
                        border: 'none'
                    },
                    _e)
            },
            splitButtonDivider: {
                backgroundColor: p.neutralTertiaryAlt
            },
            splitButtonMenuButton: {
                backgroundColor: p.themePrimary,
                color: p.white,
                selectors: {
                    ':hover': {
                        backgroundColor: p.themeDarkAlt,
                        selectors: (_f = {},
                            _f[Styling_1.HighContrastSelector] = {
                                color: 'Highlight'
                            },
                            _f)
                    }
                }
            },
            splitButtonMenuButtonDisabled: {
                backgroundColor: p.neutralLighter,
                selectors: {
                    ':hover': {
                        backgroundColor: p.neutralLighter
                    }
                }
            },
            splitButtonMenuButtonChecked: {
                backgroundColor: p.themeDark,
                selectors: {
                    ':hover': {
                        backgroundColor: p.themeDark
                    }
                }
            },
            splitButtonMenuButtonExpanded: {
                backgroundColor: p.themeDark,
                selectors: {
                    ':hover': {
                        backgroundColor: p.themeDark
                    }
                }
            },
            splitButtonMenuIcon: {
                color: p.white
            },
            splitButtonMenuIconDisabled: {
                color: p.neutralTertiary
            }
        };
    }
    exports.primaryStyles = primaryStyles;
});
//# sourceMappingURL=ButtonThemes.js.map