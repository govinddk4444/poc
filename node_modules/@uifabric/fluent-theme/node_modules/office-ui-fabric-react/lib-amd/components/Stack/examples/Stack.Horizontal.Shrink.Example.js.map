{"version":3,"file":"Stack.Horizontal.Shrink.Example.js","sourceRoot":"../src/","sources":["components/Stack/examples/Stack.Horizontal.Shrink.Example.tsx"],"names":[],"mappings":";;;IAWA;QAAkD,wDAAkC;QAClF,sCAAY,KAAS;YAArB,YACE,kBAAM,KAAK,CAAC,SAIb;YAqEO,oBAAc,GAAG,UAAC,KAAa;gBACrC,KAAI,CAAC,QAAQ,CAAC,EAAE,UAAU,EAAE,KAAK,EAAE,CAAC,CAAC;YACvC,CAAC,CAAC;YA1EA,KAAI,CAAC,KAAK,GAAG;gBACX,UAAU,EAAE,GAAG;aAChB,CAAC;;QACJ,CAAC;QAEM,6CAAM,GAAb;YACE,IAAM,WAAW,GAAiB;gBAChC,IAAI,EAAE;oBACJ,UAAU,EAAE,wBAAc,CAAC,aAAa;oBACxC,QAAQ,EAAE,QAAQ;oBAClB,KAAK,EAAK,IAAI,CAAC,KAAK,CAAC,UAAU,MAAG;iBACnC;aACF,CAAC;YACF,IAAM,eAAe,GAAqB;gBACxC,IAAI,EAAE;oBACJ,UAAU,EAAE,QAAQ;oBACpB,UAAU,EAAE,wBAAc,CAAC,YAAY;oBACvC,KAAK,EAAE,wBAAc,CAAC,KAAK;oBAC3B,OAAO,EAAE,MAAM;oBACf,MAAM,EAAE,EAAE;oBACV,cAAc,EAAE,QAAQ;oBACxB,QAAQ,EAAE,QAAQ;iBACnB;aACF,CAAC;YACF,IAAM,2BAA2B,GAAqB;gBACpD,IAAI,EAAE;oBACJ,UAAU,EAAE,QAAQ;oBACpB,UAAU,EAAE,wBAAc,CAAC,YAAY;oBACvC,KAAK,EAAE,wBAAc,CAAC,KAAK;oBAC3B,OAAO,EAAE,MAAM;oBACf,MAAM,EAAE,EAAE;oBACV,cAAc,EAAE,QAAQ;oBACxB,QAAQ,EAAE,QAAQ;oBAClB,KAAK,EAAE,GAAG;iBACX;aACF,CAAC;YAEF,IAAM,gBAAgB,GAAiB,EAAE,WAAW,EAAE,CAAC,EAAE,CAAC;YAC1D,IAAM,gBAAgB,GAAiB;gBACrC,WAAW,EAAE,CAAC;gBACd,OAAO,EAAE,EAAE;aACZ,CAAC;YAEF,OAAO,CACL,oBAAC,aAAK,IAAC,MAAM,EAAE,gBAAgB;gBAC7B,oBAAC,eAAM,IACL,KAAK,EAAC,uDAAuD,EAC7D,GAAG,EAAE,CAAC,EACN,GAAG,EAAE,GAAG,EACR,IAAI,EAAE,CAAC,EACP,YAAY,EAAE,GAAG,EACjB,SAAS,EAAE,IAAI,EACf,QAAQ,EAAE,IAAI,CAAC,cAAc,GAC7B;gBACF,oBAAC,aAAK,IAAC,UAAU,QAAC,MAAM,EAAE,WAAW,EAAE,MAAM,EAAE,gBAAgB;oBAC7D,oBAAC,aAAK,CAAC,IAAI,IAAC,IAAI,QAAC,MAAM,EAAE,eAAe,eAE3B;oBACb,oBAAC,aAAK,CAAC,IAAI,IAAC,IAAI,QAAC,MAAM,EAAE,eAAe,eAE3B;oBACb,oBAAC,aAAK,CAAC,IAAI,IAAC,IAAI,QAAC,aAAa,QAAC,MAAM,EAAE,2BAA2B,qBAErD;oBACb,oBAAC,aAAK,CAAC,IAAI,IAAC,IAAI,QAAC,MAAM,EAAE,eAAe,eAE3B,CACP,CACF,CACT,CAAC;QACJ,CAAC;QAKH,mCAAC;IAAD,CAAC,AA9ED,CAAkD,KAAK,CAAC,SAAS,GA8EhE;IA9EY,oEAA4B","sourcesContent":["import * as React from 'react';\nimport { Slider } from 'office-ui-fabric-react/lib/Slider';\nimport { Stack } from '../Stack';\nimport { IStackStyles, IStackTokens } from '../Stack.types';\nimport { IStackItemStyles } from '../StackItem/StackItem.types';\nimport { DefaultPalette } from 'office-ui-fabric-react/lib/Styling';\n\nexport interface IExampleState {\n  stackWidth: number;\n}\n\nexport class HorizontalStackShrinkExample extends React.Component<{}, IExampleState> {\n  constructor(props: {}) {\n    super(props);\n    this.state = {\n      stackWidth: 100\n    };\n  }\n\n  public render(): JSX.Element {\n    const stackStyles: IStackStyles = {\n      root: {\n        background: DefaultPalette.themeTertiary,\n        overflow: 'hidden',\n        width: `${this.state.stackWidth}%`\n      }\n    };\n    const stackItemStyles: IStackItemStyles = {\n      root: {\n        alignItems: 'center',\n        background: DefaultPalette.themePrimary,\n        color: DefaultPalette.white,\n        display: 'flex',\n        height: 50,\n        justifyContent: 'center',\n        overflow: 'hidden'\n      }\n    };\n    const nonShrinkingStackItemStyles: IStackItemStyles = {\n      root: {\n        alignItems: 'center',\n        background: DefaultPalette.themePrimary,\n        color: DefaultPalette.white,\n        display: 'flex',\n        height: 50,\n        justifyContent: 'center',\n        overflow: 'hidden',\n        width: 500\n      }\n    };\n\n    const outerStackTokens: IStackTokens = { childrenGap: 5 };\n    const innerStackTokens: IStackTokens = {\n      childrenGap: 5,\n      padding: 10\n    };\n\n    return (\n      <Stack tokens={outerStackTokens}>\n        <Slider\n          label=\"Change the stack width to see how child items shrink:\"\n          min={1}\n          max={100}\n          step={1}\n          defaultValue={100}\n          showValue={true}\n          onChange={this._onWidthChange}\n        />\n        <Stack horizontal styles={stackStyles} tokens={innerStackTokens}>\n          <Stack.Item grow styles={stackItemStyles}>\n            I shrink\n          </Stack.Item>\n          <Stack.Item grow styles={stackItemStyles}>\n            I shrink\n          </Stack.Item>\n          <Stack.Item grow disableShrink styles={nonShrinkingStackItemStyles}>\n            I don't shrink\n          </Stack.Item>\n          <Stack.Item grow styles={stackItemStyles}>\n            I shrink\n          </Stack.Item>\n        </Stack>\n      </Stack>\n    );\n  }\n\n  private _onWidthChange = (value: number): void => {\n    this.setState({ stackWidth: value });\n  };\n}\n"]}