{"version":3,"file":"Stack.Horizontal.Wrap.Example.js","sourceRoot":"../src/","sources":["components/Stack/examples/Stack.Horizontal.Wrap.Example.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,EAAE,MAAM,EAAE,MAAM,mCAAmC,CAAC;AAC3D,OAAO,EAAE,KAAK,EAAE,MAAM,UAAU,CAAC;AAEjC,OAAO,EAAE,cAAc,EAAE,MAAM,oCAAoC,CAAC;AAMpE;IAAgD,sDAAkC;IAChF,oCAAY,KAAS;QAArB,YACE,kBAAM,KAAK,CAAC,SAIb;QAoDO,oBAAc,GAAG,UAAC,KAAa;YACrC,KAAI,CAAC,QAAQ,CAAC,EAAE,UAAU,EAAE,KAAK,EAAE,CAAC,CAAC;QACvC,CAAC,CAAC;QAzDA,KAAI,CAAC,KAAK,GAAG;YACX,UAAU,EAAE,GAAG;SAChB,CAAC;;IACJ,CAAC;IAEM,2CAAM,GAAb;QACE,IAAM,WAAW,GAAiB;YAChC,IAAI,EAAE;gBACJ,UAAU,EAAE,cAAc,CAAC,aAAa;gBACxC,KAAK,EAAK,IAAI,CAAC,KAAK,CAAC,UAAU,MAAG;gBAClC,SAAS,EAAE;oBACT,QAAQ,EAAE;wBACR,UAAU,EAAE,QAAQ;wBACpB,UAAU,EAAE,cAAc,CAAC,YAAY;wBACvC,KAAK,EAAE,cAAc,CAAC,KAAK;wBAC3B,OAAO,EAAE,MAAM;wBACf,MAAM,EAAE,EAAE;wBACV,cAAc,EAAE,QAAQ;wBACxB,KAAK,EAAE,EAAE;qBACV;iBACF;aACF;SACF,CAAC;QAEF,IAAM,kBAAkB,GAAiB,EAAE,WAAW,EAAE,EAAE,EAAE,CAAC;QAC7D,IAAM,eAAe,GAAiB,EAAE,WAAW,EAAE,EAAE,EAAE,CAAC;QAE1D,OAAO,CACL,oBAAC,KAAK,IAAC,MAAM,EAAE,kBAAkB;YAC/B,oBAAC,MAAM,IACL,KAAK,EAAC,wEAAwE,EAC9E,GAAG,EAAE,CAAC,EACN,GAAG,EAAE,GAAG,EACR,IAAI,EAAE,CAAC,EACP,YAAY,EAAE,GAAG,EACjB,SAAS,EAAE,IAAI,EACf,QAAQ,EAAE,IAAI,CAAC,cAAc,GAC7B;YAEF,oBAAC,KAAK,IAAC,UAAU,QAAC,IAAI,QAAC,MAAM,EAAE,WAAW,EAAE,MAAM,EAAE,eAAe;gBACjE,sCAAc;gBACd,sCAAc;gBACd,sCAAc;gBACd,sCAAc;gBACd,sCAAc;gBACd,sCAAc;gBACd,sCAAc;gBACd,sCAAc;gBACd,sCAAc;gBACd,uCAAe,CACT,CACF,CACT,CAAC;IACJ,CAAC;IAKH,iCAAC;AAAD,CAAC,AA7DD,CAAgD,KAAK,CAAC,SAAS,GA6D9D","sourcesContent":["import * as React from 'react';\nimport { Slider } from 'office-ui-fabric-react/lib/Slider';\nimport { Stack } from '../Stack';\nimport { IStackStyles, IStackTokens } from '../Stack.types';\nimport { DefaultPalette } from 'office-ui-fabric-react/lib/Styling';\n\nexport interface IExampleState {\n  stackWidth: number;\n}\n\nexport class HorizontalStackWrapExample extends React.Component<{}, IExampleState> {\n  constructor(props: {}) {\n    super(props);\n    this.state = {\n      stackWidth: 100\n    };\n  }\n\n  public render(): JSX.Element {\n    const stackStyles: IStackStyles = {\n      root: {\n        background: DefaultPalette.themeTertiary,\n        width: `${this.state.stackWidth}%`,\n        selectors: {\n          '& span': {\n            alignItems: 'center',\n            background: DefaultPalette.themePrimary,\n            color: DefaultPalette.white,\n            display: 'flex',\n            height: 50,\n            justifyContent: 'center',\n            width: 50\n          }\n        }\n      }\n    };\n\n    const sectionStackTokens: IStackTokens = { childrenGap: 10 };\n    const wrapStackTokens: IStackTokens = { childrenGap: 30 };\n\n    return (\n      <Stack tokens={sectionStackTokens}>\n        <Slider\n          label=\"Change the stack width to see how child items wrap onto multiple rows:\"\n          min={1}\n          max={100}\n          step={1}\n          defaultValue={100}\n          showValue={true}\n          onChange={this._onWidthChange}\n        />\n\n        <Stack horizontal wrap styles={stackStyles} tokens={wrapStackTokens}>\n          <span>1</span>\n          <span>2</span>\n          <span>3</span>\n          <span>4</span>\n          <span>5</span>\n          <span>6</span>\n          <span>7</span>\n          <span>8</span>\n          <span>9</span>\n          <span>10</span>\n        </Stack>\n      </Stack>\n    );\n  }\n\n  private _onWidthChange = (value: number): void => {\n    this.setState({ stackWidth: value });\n  };\n}\n"]}