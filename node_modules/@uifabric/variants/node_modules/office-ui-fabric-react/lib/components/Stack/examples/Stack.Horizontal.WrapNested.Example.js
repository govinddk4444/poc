import * as tslib_1 from "tslib";
import * as React from 'react';
import { Slider } from 'office-ui-fabric-react/lib/Slider';
import { Stack } from '../Stack';
import { DefaultPalette } from 'office-ui-fabric-react/lib/Styling';
var HorizontalStackWrapNestedExample = /** @class */ (function (_super) {
    tslib_1.__extends(HorizontalStackWrapNestedExample, _super);
    function HorizontalStackWrapNestedExample(props) {
        var _this = _super.call(this, props) || this;
        _this._onWidthChange = function (value) {
            _this.setState({ stackWidth: value });
        };
        _this.state = {
            stackWidth: 100
        };
        return _this;
    }
    HorizontalStackWrapNestedExample.prototype.render = function () {
        var textStyles = {
            width: 50,
            height: 50,
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            color: DefaultPalette.white
        };
        var stackWidth = this.state.stackWidth;
        var containerStackStyles = {
            root: {
                background: DefaultPalette.themeTertiary,
                width: stackWidth + "%"
            }
        };
        var firstStackStyles = {
            root: {
                background: DefaultPalette.neutralTertiary,
                selectors: {
                    '& span': tslib_1.__assign({}, textStyles, { background: DefaultPalette.themePrimary })
                }
            }
        };
        var secondStackStyles = {
            root: {
                background: DefaultPalette.neutralSecondary,
                selectors: {
                    '& span': tslib_1.__assign({}, textStyles, { background: DefaultPalette.themeDark })
                }
            }
        };
        var thirdStackStyles = {
            root: {
                background: DefaultPalette.neutralPrimary,
                selectors: {
                    '& span': tslib_1.__assign({}, textStyles, { background: DefaultPalette.themeDarker })
                }
            }
        };
        var sectionStackTokens = { childrenGap: 10 };
        var wrapStackTokens = { childrenGap: '30 40' };
        var firstStackTokens = { childrenGap: '10 30' };
        var secondStackTokens = { childrenGap: '20 50' };
        return (React.createElement(Stack, { tokens: sectionStackTokens },
            React.createElement(Slider, { label: "Change the stack width to see how child items wrap onto multiple rows:", min: 1, max: 100, step: 1, defaultValue: 100, showValue: true, onChange: this._onWidthChange }),
            React.createElement(Stack, { horizontal: true, wrap: true, styles: containerStackStyles, tokens: wrapStackTokens },
                React.createElement(Stack, { horizontal: true, wrap: true, styles: firstStackStyles, tokens: firstStackTokens },
                    React.createElement("span", null, "1"),
                    React.createElement("span", null, "2"),
                    React.createElement("span", null, "3"),
                    React.createElement("span", null, "4"),
                    React.createElement("span", null, "5"),
                    React.createElement("span", null, "6"),
                    React.createElement("span", null, "7")),
                React.createElement(Stack, { horizontal: true, wrap: true, styles: secondStackStyles, tokens: secondStackTokens },
                    React.createElement("span", null, "1"),
                    React.createElement("span", null, "2"),
                    React.createElement("span", null, "3")),
                React.createElement(Stack, { horizontal: true, wrap: true, styles: thirdStackStyles },
                    React.createElement("span", null, "1"),
                    React.createElement("span", null, "2"),
                    React.createElement("span", null, "3"),
                    React.createElement("span", null, "4"),
                    React.createElement("span", null, "5"),
                    React.createElement("span", null, "6"),
                    React.createElement("span", null, "7"),
                    React.createElement("span", null, "8"),
                    React.createElement("span", null, "9"),
                    React.createElement("span", null, "10")))));
    };
    return HorizontalStackWrapNestedExample;
}(React.Component));
export { HorizontalStackWrapNestedExample };
//# sourceMappingURL=Stack.Horizontal.WrapNested.Example.js.map