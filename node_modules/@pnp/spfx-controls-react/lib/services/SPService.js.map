{"version":3,"sources":["services/SPService.ts"],"names":[],"mappings":"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","file":"services/SPService.js","sourcesContent":["import { ISPService, ILibsOptions, LibsOrderBy } from \"./ISPService\";\nimport { ISPLists } from \"../common/SPEntities\";\nimport { WebPartContext } from \"@microsoft/sp-webpart-base\";\nimport { ExtensionContext } from \"@microsoft/sp-extension-base\";\nimport { SPHttpClient, SPHttpClientResponse,ISPHttpClientOptions } from \"@microsoft/sp-http\";\nimport { sp, Web } from '@pnp/sp';\n\nexport default class SPService implements ISPService {\n\n  constructor(private _context: WebPartContext | ExtensionContext) { }\n\n  /**\n   * Get lists or libraries\n   *\n   * @param options\n   */\n  public async getLibs(options?: ILibsOptions): Promise<ISPLists> {\n    let filtered: boolean;\n    let queryUrl: string = `${this._context.pageContext.web.absoluteUrl}/_api/web/lists?$select=Title,id,BaseTemplate`;\n\n    if (options.orderBy) {\n      queryUrl += `&$orderby=${options.orderBy === LibsOrderBy.Id ? 'Id' : 'Title'}`;\n    }\n\n    if (options.baseTemplate) {\n      queryUrl += `&$filter=BaseTemplate eq ${options.baseTemplate}`;\n      filtered = true;\n    }\n\n    if (options.includeHidden === false) {\n      queryUrl += filtered ? ' and Hidden eq false' : '&$filter=Hidden eq false';\n      filtered = true;\n    }\n\n    const data = await this._context.spHttpClient.get(queryUrl, SPHttpClient.configurations.v1);\n    if (data.ok) {\n      return await data.json() as Promise<ISPLists>;\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Get List Items\n   */\n  public async getListItems(filterText: string, listId: string, internalColumnName: string, webUrl?: string): Promise<any[]> {\n    let returnItems: any[];\n\n    try {\n      const webAbsoluteUrl = !webUrl ? this._context.pageContext.web.absoluteUrl : webUrl;\n      const apiUrl = `${webAbsoluteUrl}/_api/web/lists('${listId}')/items?$select=Id,${internalColumnName}&$filter=startswith(${internalColumnName},'${filterText}')`;\n      const data = await this._context.spHttpClient.get(apiUrl, SPHttpClient.configurations.v1);\n      if (data.ok) {\n        const results = await data.json();\n        if (results && results.value && results.value.length > 0) {\n          return results.value;\n        }\n      }\n\n      return [];\n    } catch (error) {\n      return Promise.reject(error);\n    }\n  }\n\n   /**\n    * Get list item attachments\n    *\n    * @param listId\n    * @param itemId\n    * @param webUrl\n    */\n   public async getListItemAttachments(listId: string, itemId: number, webUrl?: string): Promise<any[]> {\n    try {\n      const webAbsoluteUrl = !webUrl ? this._context.pageContext.web.absoluteUrl : webUrl;\n      const apiUrl = `${webAbsoluteUrl}/_api/web/lists('${listId}')/items(${itemId})/AttachmentFiles`;\n      const data = await this._context.spHttpClient.get(apiUrl, SPHttpClient.configurations.v1);\n      if (data.ok) {\n        const results = await data.json();\n        if (results && results.value && results.value.length > 0) {\n          return results.value;\n        }\n      }\n      return null;\n    } catch (error) {\n      console.dir(error);\n      return Promise.reject(error);\n    }\n  }\n\n  /**\n   * Delete attachment\n   *\n   * @param fileName\n   * @param listId\n   * @param itemId\n   * @param webUrl\n   */\n  public async deleteAttachment(fileName: string, listId: string, itemId: number, webUrl?: string): Promise<void> {\n    try {\n      const spOpts: ISPHttpClientOptions = {\n        headers: { \"X-HTTP-Method\": 'DELETE', }\n      };\n      const webAbsoluteUrl = !webUrl ? this._context.pageContext.web.absoluteUrl : webUrl;\n      const apiUrl = `${webAbsoluteUrl}/_api/web/lists('${listId}')/items(${itemId})/AttachmentFiles/getByFileName('${encodeURIComponent(fileName)}')`;\n      const data = await this._context.spHttpClient.post(apiUrl, SPHttpClient.configurations.v1, spOpts);\n    } catch (error) {\n      console.dir(error);\n      return Promise.reject(error);\n    }\n  }\n\n  /**\n   * Add attachment\n   *\n   * @param listId\n   * @param itemId\n   * @param fileName\n   * @param file\n   * @param webUrl\n   */\n  public async addAttachment(listId: string, itemId: number, fileName: string, file: File, webUrl?: string): Promise<void> {\n    try {\n      // remove special characteres in FileName\n      fileName = fileName.replace(/[^\\.\\w\\s]/gi, '');\n      //  Check if Attachment Exists\n      const fileExists = await this.checkAttachmentExists(listId, itemId, fileName, webUrl);\n      // Delete Attachment if exists\n      if (fileExists) {\n        await this.deleteAttachment(fileName, listId, itemId, webUrl);\n      }\n      // Add Attachment\n      const spOpts: ISPHttpClientOptions = {\n        body: file\n      };\n      const webAbsoluteUrl = !webUrl ? this._context.pageContext.web.absoluteUrl : webUrl;\n      const apiUrl = `${webAbsoluteUrl}/_api/web/lists('${listId}')/items(${itemId})/AttachmentFiles/add(FileName='${encodeURIComponent(fileName)}')`;\n      const data = await this._context.spHttpClient.post(apiUrl, SPHttpClient.configurations.v1, spOpts);\n      return;\n    } catch (error) {\n      return Promise.reject(error);\n    }\n  }\n\n  /**\n   * Get attachement for list item\n   *\n   * @param listId\n   * @param itemId\n   * @param fileName\n   * @param webUrl\n   */\n  public async getAttachment(listId: string, itemId: number, fileName: string, webUrl?: string): Promise<any> {\n    const webAbsoluteUrl = !webUrl ? this._context.pageContext.web.absoluteUrl : webUrl;\n    const apiUrl = `${webAbsoluteUrl}/_api/web/lists('${listId}')/items(${itemId})/AttachmentFiles/GetByFileBame('${fileName}'))`;\n    const data = await this._context.spHttpClient.get(apiUrl, SPHttpClient.configurations.v1);\n    if (data.ok) {\n      const file = await data.json();\n      if (file) {\n        return file;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Check if the attachment exists\n   *\n   * @param listId\n   * @param itemId\n   * @param fileName\n   * @param webUrl\n   */\n  public async checkAttachmentExists(listId: string, itemId: number, fileName: string, webUrl?: string): Promise<any> {\n    try {\n      const listName = await this.getListName(listId, webUrl);\n      const webAbsoluteUrl = !webUrl ? this._context.pageContext.web.absoluteUrl : webUrl;\n      const apiUrl = `${webAbsoluteUrl}/_api/web/getfilebyserverrelativeurl('/lists/${listName}/Attachments/${itemId}/${fileName}')`;\n      const data = await this._context.spHttpClient.get(apiUrl, SPHttpClient.configurations.v1);\n      if (data.ok) {\n        const results = await data.json();\n        if (results && results.Exists) {\n          return results.Exists;\n        }\n      }\n\n      return false;\n    } catch (error) {\n      return Promise.reject(error);\n    }\n  }\n\n  /**\n   * Get the list name\n   *\n   * @param listId\n   * @param webUrl\n   */\n  public async getListName(listId: string, webUrl?: string): Promise<string> {\n    const webAbsoluteUrl = !webUrl ? this._context.pageContext.web.absoluteUrl : webUrl;\n    const apiUrl = `${webAbsoluteUrl}/_api/web/lists('${listId}')?$select=RootFolder/Name&$expand=RootFolder)`;\n    const data = await this._context.spHttpClient.get(apiUrl, SPHttpClient.configurations.v1);\n    if (data.ok) {\n      const results = await data.json();\n      if (results) {\n        return results.RootFolder.Name;\n      }\n    }\n    return;\n  }\n}\n"],"sourceRoot":"../../src"}