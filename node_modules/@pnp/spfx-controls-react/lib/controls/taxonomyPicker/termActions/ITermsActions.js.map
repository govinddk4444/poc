{"version":3,"sources":["controls/taxonomyPicker/termActions/ITermsActions.ts"],"names":[],"mappings":";;AA6CA;;GAEG;AACH,IAAY,sBAGX;AAHD,WAAY,sBAAsB;IAChC,yEAAW,CAAA;IACX,2EAAQ,CAAA;AACV,CAAC,EAHW,sBAAsB,GAAtB,8BAAsB,KAAtB,8BAAsB,QAGjC;AAED;;GAEG;AACH,IAAY,uBAIX;AAJD,WAAY,uBAAuB;IACjC,qEAAQ,CAAA;IACR,qEAAI,CAAA;IACJ,mFAAW,CAAA;AACb,CAAC,EAJW,uBAAuB,GAAvB,+BAAuB,KAAvB,+BAAuB,QAIlC;AAED;;GAEG;AACH,IAAY,UAGX;AAHD,WAAY,UAAU;IACpB,iEAAmB,CAAA;IACnB,iEAAe,CAAA;AACjB,CAAC,EAHW,UAAU,GAAV,kBAAU,KAAV,kBAAU,QAGrB","file":"controls/taxonomyPicker/termActions/ITermsActions.js","sourcesContent":["import { ITerm } from '../../../services/ISPTermStorePickerService';\nimport SPTermStorePickerService from '../../../services/SPTermStorePickerService';\n\nexport interface ITermActionsControlProps {\n  /**\n   * Current term.\n   */\n  term: ITerm;\n  /**\n   * List of actions.\n   */\n  termActions: ITermActions;\n  /**\n   * Taxonomy Term Service\n   */\n  spTermService: SPTermStorePickerService;\n  /**\n   * Callback after execution term action.\n   */\n  termActionCallback: (updateAction: UpdateAction) => void;\n}\n\nexport interface ITermActionsControlState {\n  /**\n   * Specifies the list of the available actions for the term.\n   */\n  availableActions: ITermAction[];\n  /**\n   * TermsAction display mode.\n   */\n  displayMode: TermActionsDisplayMode;\n  /**\n   * Specifies how the concreate term action is going to be displayed (icon/text/both).\n   */\n  displayStyle: TermActionsDisplayStyle;\n}\n\nexport interface IConcreteTermActionProps {\n  termActions: ITermAction[];\n  term: ITerm;\n  displayStyle: TermActionsDisplayStyle;\n  spTermService: SPTermStorePickerService;\n  termActionCallback: (updateAction: UpdateAction) => void;\n}\n\n/**\n * Specifies the display mode of the term actions.\n */\nexport enum TermActionsDisplayMode {\n  buttons = 1,\n  dropdown\n}\n\n/**\n * Specifies the style which is applied to display actions.\n */\nexport enum TermActionsDisplayStyle {\n  text = 1,\n  icon,\n  textAndIcon\n}\n\n/**\n * Specifies the action that should be applied after executing the action callback.\n */\nexport enum UpdateType {\n  updateTermLabel = 1,\n  updateTermsTree\n}\n/**\n * Specifies the result that will be returned to the Term after the execution of the callback.\n */\nexport interface UpdateAction {\n  updateActionType: UpdateType;\n  value?: string;\n}\n\nexport interface ITermActions {\n  actions: ITermAction[];\n  termActionsDisplayStyle?: TermActionsDisplayStyle;\n  termActionsDisplayMode?: TermActionsDisplayMode;\n  /**\n   * Initializes the term action with the taxonomy service.\n   */\n  initialize?: (spTermService: SPTermStorePickerService) => Promise<void>;\n}\n\n/**\n * Interface represents the possible action that could be execute on term level.\n */\nexport interface ITermAction {\n  /**\n   * Action ID\n   */\n  id: string;\n  /**\n   * Action title\n   */\n  title: string;\n  /**\n   * Icon class name to be displayed for the action.\n   */\n  iconName?: string;\n  /**\n   * Specify if the action is hidden. This could be used for instance when you want to invoke the action right after rendering.\n   */\n  hidden?: boolean;\n  /**\n   * Specifies if you want to invoke the action on render\n   */\n  invokeActionOnRender?: boolean;\n\n  /**\n  * Method checks if the current term is supported.\n  * @param currentTerm\n  */\n  applyToTerm: (currentTerm: ITerm) => Promise<boolean> | boolean;\n  /**\n   * Method to be executed when action is fired.\n   */\n  actionCallback: (spTermService: SPTermStorePickerService, currentTerm: ITerm) => Promise<UpdateAction>;\n}\n"],"sourceRoot":"../../../../src"}