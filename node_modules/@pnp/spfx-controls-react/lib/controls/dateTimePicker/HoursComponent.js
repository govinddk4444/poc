"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var strings = require("ControlStrings");
var React = require("react");
var DateTimeConventions_1 = require("./DateTimeConventions");
var TextField_1 = require("office-ui-fabric-react/lib/TextField");
var TimeHelper_1 = require("./TimeHelper");
/**
 * Hours component, this renders the hours dropdown
 */
var HoursComponent = (function (_super) {
    __extends(HoursComponent, _super);
    function HoursComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    HoursComponent.prototype.render = function () {
        var _this = this;
        return (React.createElement(TextField_1.MaskedTextField, { disabled: this.props.disabled, label: "", value: this.props.value ? TimeHelper_1.TimeHelper.hoursValue(this.props.value, this.props.timeConvention) : "" + (this.props.timeConvention === DateTimeConventions_1.TimeConvention.Hours24 ? "00" : "12 AM"), mask: this.props.timeConvention === DateTimeConventions_1.TimeConvention.Hours24 ? "29" : "19 AM", maskFormat: {
                '1': /[0-1]/,
                '2': /[0-2]/,
                '9': /[0-9]/,
                'A': /[AaPp]/,
                'M': /[Mm]/
            }, onGetErrorMessage: function (value) {
                var message = "";
                var hours = parseInt(value);
                if (isNaN(hours)) {
                    message = strings.DateTimePickerHourValueInvalid;
                }
                if (!message && _this.props.timeConvention === DateTimeConventions_1.TimeConvention.Hours24) {
                    message = hours > 23 ? strings.DateTimePickerHourValueInvalid : "";
                }
                else {
                    message = hours > 12 ? strings.DateTimePickerHourValueInvalid : "";
                }
                if (!message) {
                    _this.props.onChange(value);
                }
                return message;
            } }));
    };
    return HoursComponent;
}(React.Component));
exports.default = HoursComponent;

//# sourceMappingURL=HoursComponent.js.map
